(defun tic-tac-toe ()
	(format t "Who goes first?: ")
	(let ((first-turn (read)))
		;(format t "first-turn is ~A" first-turn)
		(cond
			((equal first-turn 'H) 
				(format t "Human goes first.~%")
				(run-game (create-board) 'H)
			)
			((equal first-turn 'C) 
				(run-game (create-board) 'C)
			)
			(t
				(format t "Please input C for computer or H for human.~%")
				(tic-tac-toe)
			)
		)
	)
)

(defun create-board ()
	(setf board (list '(- - -) '(- - -) '(- - -)))
	;(format t "~A" board);(first (first board)))
)

(defun run-game (board first-turn)
	(format t "~A" (first (first board)))
	(format t "~A" (first (second board)))
	(format t "~A~%" (first (third board)))
	(format t "~A" (second (first board)))
	(format t "~A" (second (second board)))
	(format t "~A~%" (second (third board)))
	(format t "~A" (third (first board)))
	(format t "~A" (third (second board)))
	(format t "~A" (third (third board)))
)