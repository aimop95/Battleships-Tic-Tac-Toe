(defun reinitializeBoard (board)
	(setf (nth 0 (nth 0 board)) '- )
	(setf (nth 0 (nth 1 board)) '- )
	(setf (nth 0 (nth 2 board)) '- )
	(setf (nth 1 (nth 0 board)) '- )
	(setf (nth 1 (nth 1 board)) '- )
	(setf (nth 1 (nth 2 board)) '- )
	(setf (nth 2 (nth 0 board)) '- )
	(setf (nth 2 (nth 1 board)) '- )
	(setf (nth 2 (nth 2 board)) '- )
	)
(defun tic-tac-toe()
	;(setf tester (list '(1 2 3) '(4 5 6) '(7 8 9)))
	;(setf board 1)
	;(format t "It saw me.~%")
	(setf board (list '(- - -) '(- - -) '(- - -)))
	(reinitializeBoard board)
	(printBoard)
	(run)
	)
(defun run ()
	(format t "Who goes first?: ")
	(setf turn (read))
	(cond
		((equal turn 'H)
			(format t "human goes first ~%")
			(return-from run (play turn))
			)
		((equal turn 'C)
			(format t "computer goes first~%")
			(return-from run (play turn))
			)
		(t
			(format t "HAS TO BE EITHER C FOR COMPUTER OR H FOR HUMAN ~%" )
			(run)
			)
		)
	)

(defun printBoard ()
	(format t "  0 1 2~%")
	(format t "0~A~%" (nth 0 board))
	(format t "1~A~%" (nth 1 board))
	(format t "2~A~%" (nth 2 board))
	)

(defun play (turn)
	(cond
		((equal turn 'H)
			(format t "Human where would you like to play? ROW COL ~%")
			(setf row (read))
			(setf col (read))
			(if (equal (nth col (nth row board)) '- )
				(progn
					(setf (nth col (nth row board)) turn)
					(printBoard)
					(if (checkWin turn)
						(return-from play (format t "~A WINS" turn))
						(if (checkDraw)
							(return-from play (format t "It's a draw!"))
							)
						)
					(play 'C))
				)			
			)
		((equal turn 'C)
			;(format t "Computer where would you like to play? ROW COL ~%")
			;(setf row (read))
			;(setf col (read))
			(format t "Computer turn.~%")
			(let ((compList (compAdvanced board) )) ;;See compRandom comment below
			;(setf compList (compRandom board))
				;(format t "Complist is ~A" compList)
				(setf row (car compList))
				(setf col (cadr compList))
				(if (equal (nth col (nth row board)) '- )
					(progn
						(setf (nth col (nth row board)) turn)
						(printBoard)
						(if (checkWin turn)
							(return-from play (format t "~A WINS" turn))
							(if (checkDraw) ;;If neither player has won, this checks to see if the board is full.
								(return-from play (format t "It's a draw!"))
								)
							)
						(play 'H)
						)
					)
				)			
			)
		)
	)
	; (format t "Where would you like to play? ROW COL ~%")
	; (setf row (read))
	; (setf col (read))
	; (if (equal (nth col (nth row board)) '- )
	; 	(progn
	; 	(setf (nth col (nth row board)) player)
	; 	(printBoard))
	; )

	(defun compRandom (board) ;;Currently, the computer picks a random empty spot on the grid and plays there.
		(setf row (random 3))
		(setf col (random 3))
		(if (equal (nth col (nth row board)) '-)
			(return-from compRandom (list row col))
			(compRandom board)
			)
		)
	(defun compAdvanced (board) ;;Calls blocker to check for blocking, then defaults to randomizer if none are found
		(setf compPair (compBlocker board))
		(if (listp compPair)
			(return-from compAdvanced compPair)
			(return-from compAdvanced (compRandom board))
			)
		)
;			(progn
;				(setf compPair (compAttacker board)) ;;This is called if no blocks are found. Commented out for testing's sake.
;				(if (listp compPair)
;					(return-from compAdvanced compPair)
;					(return-from compAdvanced (compRandom board))
;					)
;				)
		;	)
;	)
	(defun spaceChecker (board pair) ;;Checks to see if the space AI is playing on is empty or not. Used in blocker and attacker
		(if (equal (nth col (nth row board)) '- )
			t
			nil
			)
		)
	(defun compAttacker (board) ;;This attempts to connect three in all viable locations at the time.
		(cond
			((and (equal (nth 0 (nth 0 board)) 'C) (equal (nth 0 (nth 0 board)) (nth 0 (nth 1 board))))
				(if (spaceChecker board (list 0 2))
					(return-from compAttacker (list 0 2))
					))
			((and (equal (nth 0 (nth 1 board)) 'C) (equal (nth 0 (nth 1 board)) (nth 0 (nth 2 board))))
				(if (spaceChecker board (list 0 0))
					(return-from compAttacker (list 0 0))
					))
			((and (equal (nth 0 (nth 0 board)) 'C) (equal (nth 0 (nth 0 board)) (nth 0 (nth 2 board))))
				(if (spaceChecker board (list 0 1))
					(return-from compAttacker (list 0 1))
					))
			((and (equal (nth 1 (nth 0 board)) 'C) (equal (nth 1 (nth 0 board)) (nth 1 (nth 1 board))))
				(if (spaceChecker board (list 1 2))
					(return-from compAttacker (list 1 2))
					))
			((and (equal (nth 1 (nth 1 board)) 'C) (equal (nth 1 (nth 2 board)) (nth 1 (nth 1 board))))
				(if (spaceChecker board (list 1 0))
					(return-from compAttacker (list 1 0))
					))
			((and (equal (nth 1 (nth 0 board)) 'C) (equal (nth 1 (nth 2 board)) (nth 1 (nth 0 board))))
				(if (spaceChecker board (list 1 1))
					(return-from compAttacker (list 1 1))
					))
			((and (equal (nth 2 (nth 0 board)) 'C) (equal (nth 2 (nth 0 board)) (nth 2 (nth 1 board))))
				(if (spaceChecker board (list 2 2))
					(return-from compAttacker (list 2 2))
					))
			((and (equal (nth 2 (nth 1 board)) 'C) (equal (nth 2 (nth 2 board)) (nth 2 (nth 1 board))))
				(if (spaceChecker board (list 2 0))
					(return-from compAttacker (list 2 0))
					))
			((and (equal (nth 2 (nth 0 board)) 'C) (equal (nth 2 (nth 2 board)) (nth 2 (nth 0 board)))) ;;This is where the horizontals end
				(if (spaceChecker board (list 2 1))
					(return-from compAttacker (list 2 1))
					))
			((and (equal (nth 0 (nth 0 board)) 'C) (equal (nth 1 (nth 0 board)) (nth 0 (nth 0 board))))
				(return-from compAttacker (list 2 0)))
			((and (equal (nth 0 (nth 0 board)) 'C) (equal (nth 2 (nth 0 board)) (nth 0 (nth 0 board))))
				(return-from compAttacker (list 1 0)))
			((and (equal (nth 1 (nth 0 board)) 'C) (equal (nth 2 (nth 0 board)) (nth 1 (nth 0 board))))
				(return-from compAttacker (list 0 0)))
			((and (equal (nth 1 (nth 1 board)) 'C) (equal (nth 1 (nth 1 board)) (nth 0 (nth 1 board))))
				(return-from compAttacker (list 2 1)))
			((and (equal (nth 0 (nth 1 board)) 'C) (equal (nth 2 (nth 1 board)) (nth 0 (nth 1 board))))
				(return-from compAttacker (list 1 1)))
			((and (equal (nth 1 (nth 1 board)) 'C) (equal (nth 2 (nth 1 board)) (nth 2 (nth 1 board))))
				(return-from compAttacker (list 0 1)))
			((and (equal (nth 1 (nth 2 board)) 'C) (equal (nth 0 (nth 2 board)) (nth 1 (nth 2 board))))
				(return-from compAttacker (list 2 2)))
			((and (equal (nth 2 (nth 2 board)) 'C) (equal (nth 0 (nth 2 board)) (nth 2 (nth 2 board))))
				(return-from compAttacker (list 1 2)))
			((and (equal (nth 2 (nth 2 board)) 'C) (equal (nth 1 (nth 2 board)) (nth 2 (nth 2 board)))) ;;This is where the verticals end
				(return-from compAttacker (list 0 2)))
			((and (equal (nth 0 (nth 0 board)) 'C) (equal (nth 0 (nth 0 board)) (nth 1 (nth 1 board))))
				(return-from compAttacker (list 2 2)))
			((and (equal (nth 0 (nth 0 board)) 'C) (equal (nth 0 (nth 0 board)) (nth 2 (nth 2 board))))
				(return-from compAttacker (list 1 1)))
			((and (equal (nth 0 (nth 2 board)) 'C) (equal (nth 0 (nth 2 board)) (nth 1 (nth 1 board))))
				(return-from compAttacker (list 2 0)))
			((and (equal (nth 0 (nth 2 board)) 'C) (equal (nth 0 (nth 2 board)) (nth 2 (nth 0 board))))
				(return-from compAttacker (list 1 1)))
			((and (equal (nth 2 (nth 0 board)) 'C) (equal (nth 1 (nth 1 board)) (nth 2 (nth 0 board))))
				(return-from compAttacker (list 0 2)))
			((and (equal (nth 2 (nth 2 board)) 'C) (equal (nth 1 (nth 1 board)) (nth 2 (nth 2 board)))) ;This is where the diagonals end
				(return-from compAttacker (list 0 0)))
			(t
				0) )
		)
	(defun compBlocker (board) ;;This attempts to block any and all combinations the player could try to make
		(cond
			((and (equal (nth 0 (nth 0 board)) 'H) (equal (nth 0 (nth 0 board)) (nth 0 (nth 1 board))))
				(if (spaceChecker board (list 0 2))
					(return-from compBlocker (list 0 2))
					))
			((and (equal (nth 0 (nth 1 board)) 'H) (equal (nth 0 (nth 1 board)) (nth 0 (nth 2 board))))
				(if (spaceChecker board (list 0 0))
					(return-from compBlocker (list 0 0))
					))
			((and (equal (nth 0 (nth 0 board)) 'H) (equal (nth 0 (nth 0 board)) (nth 0 (nth 2 board))))
				(if (spaceChecker board (list 0 1))
					(return-from compBlocker (list 0 1))
					))
			((and (equal (nth 1 (nth 0 board)) 'H) (equal (nth 1 (nth 0 board)) (nth 1 (nth 1 board))))
				(if (spaceChecker board (list 1 2))
					(return-from compBlocker (list 1 2))
					))
			((and (equal (nth 1 (nth 1 board)) 'H) (equal (nth 1 (nth 2 board)) (nth 1 (nth 1 board))))
				(if (spaceChecker board (list 1 0))
					(return-from compBlocker (list 1 0))
					))
			((and (equal (nth 1 (nth 0 board)) 'H) (equal (nth 1 (nth 2 board)) (nth 1 (nth 0 board))))
				(if (spaceChecker board (list 1 1))
					(return-from compBlocker (list 1 1))
					))
			((and (equal (nth 2 (nth 0 board)) 'H) (equal (nth 2 (nth 0 board)) (nth 2 (nth 1 board))))
				(if (spaceChecker board (list 2 2))
					(return-from compBlocker (list 2 2))
					))
			((and (equal (nth 2 (nth 1 board)) 'H) (equal (nth 2 (nth 2 board)) (nth 2 (nth 1 board))))
				(if (spaceChecker board (list 2 0))
					(return-from compBlocker (list 2 0))
					))
			((and (equal (nth 2 (nth 0 board)) 'H) (equal (nth 2 (nth 2 board)) (nth 2 (nth 0 board)))) ;;This is where the horizontals end
				(if (spaceChecker board (list 2 1))
					(return-from compBlocker (list 2 1))
					))
			((and (equal (nth 0 (nth 0 board)) 'H) (equal (nth 1 (nth 0 board)) (nth 0 (nth 0 board))))
				(return-from compBlocker (list 2 0)))
			((and (equal (nth 0 (nth 0 board)) 'H) (equal (nth 2 (nth 0 board)) (nth 0 (nth 0 board))))
				(return-from compBlocker (list 1 0)))
			((and (equal (nth 1 (nth 0 board)) 'H) (equal (nth 2 (nth 0 board)) (nth 1 (nth 0 board))))
				(return-from compBlocker (list 0 0)))
			((and (equal (nth 1 (nth 1 board)) 'H) (equal (nth 1 (nth 1 board)) (nth 0 (nth 1 board))))
				(return-from compBlocker (list 2 1)))
			((and (equal (nth 0 (nth 1 board)) 'H) (equal (nth 2 (nth 1 board)) (nth 0 (nth 1 board))))
				(return-from compBlocker (list 1 1)))
			((and (equal (nth 1 (nth 1 board)) 'H) (equal (nth 2 (nth 1 board)) (nth 2 (nth 1 board))))
				(return-from compBlocker (list 0 1)))
			((and (equal (nth 1 (nth 2 board)) 'H) (equal (nth 0 (nth 2 board)) (nth 1 (nth 2 board))))
				(return-from compBlocker (list 2 2)))
			((and (equal (nth 2 (nth 2 board)) 'H) (equal (nth 0 (nth 2 board)) (nth 2 (nth 2 board))))
				(return-from compBlocker (list 1 2)))
			((and (equal (nth 2 (nth 2 board)) 'H) (equal (nth 1 (nth 2 board)) (nth 2 (nth 2 board)))) ;;This is where the verticals end
				(return-from compBlocker (list 0 2)))
			((and (equal (nth 0 (nth 0 board)) 'H) (equal (nth 0 (nth 0 board)) (nth 1 (nth 1 board))))
				(return-from compBlocker (list 2 2)))
			((and (equal (nth 0 (nth 0 board)) 'H) (equal (nth 0 (nth 0 board)) (nth 2 (nth 2 board))))
				(return-from compBlocker (list 1 1)))
			((and (equal (nth 0 (nth 2 board)) 'H) (equal (nth 0 (nth 2 board)) (nth 1 (nth 1 board))))
				(return-from compBlocker (list 2 0)))
			((and (equal (nth 0 (nth 2 board)) 'H) (equal (nth 0 (nth 2 board)) (nth 2 (nth 0 board))))
				(return-from compBlocker (list 1 1)))
			((and (equal (nth 2 (nth 0 board)) 'H) (equal (nth 1 (nth 1 board)) (nth 2 (nth 0 board))))
				(return-from compBlocker (list 0 2)))
			((and (equal (nth 2 (nth 2 board)) 'H) (equal (nth 1 (nth 1 board)) (nth 2 (nth 2 board)))) ;This is where the diagonals end
				(return-from compBlocker (list 0 0)))
			(t
				0) )
		)
	(defun checkWin(player) ;;Checks to see if either player has won.
	; check vertical left
	(or (and (equal (nth 0 (nth 0 board)) player)
		(equal (nth 0 (nth 1 board)) player)
		(equal (nth 0 (nth 2 board)) player))
	(and (equal (nth 1 (nth 0 board)) player)
		(equal (nth 1 (nth 1 board)) player)
		(equal (nth 1 (nth 2 board)) player))
	(and (equal (nth 2 (nth 0 board)) player)
		(equal (nth 2 (nth 1 board)) player)
		(equal (nth 2 (nth 2 board)) player))
	(and (equal (nth 0 (nth 0 board)) player)
		(equal (nth 1 (nth 0 board)) player)
		(equal (nth 2 (nth 0 board)) player))
	(and (equal (nth 0 (nth 1 board)) player)
		(equal (nth 1 (nth 1 board)) player)
		(equal (nth 2 (nth 1 board)) player))
	(and (equal (nth 0 (nth 2 board)) player)
		(equal (nth 1 (nth 2 board)) player)
		(equal (nth 2 (nth 2 board)) player))
	(and (equal (nth 0 (nth 0 board)) player)
		(equal (nth 1 (nth 1 board)) player)
		(equal (nth 2 (nth 2 board)) player))
	(and (equal (nth 2 (nth 0 board)) player)
		(equal (nth 1 (nth 1 board)) player)
		(equal (nth 0 (nth 2 board)) player))
	)
	
	)
	(defun checkDraw() ;;Checks for a draw after checkWin is called.
	; check vertical left
	(and (not (equal (nth 0 (nth 0 board)) '-))
		(not (equal (nth 0 (nth 1 board)) '-))
		(not (equal (nth 0 (nth 2 board)) '-))
		(not (equal (nth 1 (nth 0 board)) '-))
		(not (equal (nth 1 (nth 1 board)) '-))
		(not (equal (nth 1 (nth 2 board)) '-))
		(not (equal (nth 2 (nth 0 board)) '-))
		(not (equal (nth 2 (nth 1 board)) '-))
		(not (equal (nth 2 (nth 2 board)) '-))
		)
	
	)
;TESTING TO MAKE SURE THAT CONDITIONALS ARE RIGHT
(defun testing(i boardz) ;;Ask Adam about these last three, but I don't think these are used anymore.
	(cond 
		((equal i 1)
			(format t "Vertical Left")
			(format t "~A" (nth 0 (nth 0 boardz)))
			(format t "~A" (nth 0 (nth 1 boardz)))
			(format t "~A" (nth 0 (nth 2 boardz)))
			)
		((equal i 2)
			(format t "Vertical Middle")
			(format t "~A" (nth 1 (nth 0 boardz)))
			(format t "~A" (nth 1 (nth 1 boardz)))
			(format t "~A" (nth 1 (nth 2 boardz)))
			)
		((equal i 3)
			(format t "Vertical Right")
			(format t "~A" (nth 2 (nth 0 boardz)))
			(format t "~A" (nth 2 (nth 1 boardz)))
			(format t "~A" (nth 2 (nth 2 boardz)))
			)
		((equal i 4)
			(format t "Horizontal Top")
			(format t "~A" (nth 0 (nth 0 boardz)))
			(format t "~A" (nth 1 (nth 0 boardz)))
			(format t "~A" (nth 2 (nth 0 boardz)))
			)
		((equal i 5)
			(format t "Horizontal Middle")
			(format t "~A" (nth 0 (nth 1 boardz)))
			(format t "~A" (nth 1 (nth 1 boardz)))
			(format t "~A" (nth 2 (nth 1 boardz)))
			)
		((equal i 6)
			(format t "Horizontal Bottom")
			(format t "~A" (nth 0 (nth 2 boardz)))
			(format t "~A" (nth 1 (nth 2 boardz)))
			(format t "~A" (nth 2 (nth 2 boardz)))
			)
		((equal i 7)
			(format t "left-right")
			(format t "~A" (nth 0 (nth 0 boardz)))
			(format t "~A" (nth 1 (nth 1 boardz)))
			(format t "~A" (nth 2 (nth 2 boardz)))
			)
		((equal i 8)
			(format t "right-left")
			(format t "~A" (nth 2 (nth 0 boardz)))
			(format t "~A" (nth 1 (nth 1 boardz)))
			(format t "~A" (nth 0 (nth 2 boardz)))
			)
		)
	)
(defun returnTrue()
	(if (equal 8 8)
		t)
	)
(defun gameOver()
	(loop for x in board
		do(loop for y in x
			;do (print y)
			)
		)
	)
