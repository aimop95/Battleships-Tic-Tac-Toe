(defun tic-tac-toe()
	(setf tester (list '(1 2 3) '(4 5 6) '(7 8 9)))
	(setf board (list '(- - -) '(- - -) '(- - -))) ;(Andrew) FIXME: Doesn't reset board if (tic-tac-toe) is called twice in the console
	(printBoard)
	(run)
)
(defun run ()
	(format t "Who goes first?: ")
	(setf turn (read))
		(cond
			((equal turn 'H)
				(format t "human goes first ~%")
				(return-from run (play turn))
			)
			((equal turn 'C)
				(format t "computer goes first~%")
				(return-from run (play turn))
			)
			(t
				(format t "HAS TO BE EITHER C FOR COMPUTER OR H FOR HUMAN ~%" )
				(run)
			)
		)
)

(defun printBoard ()
	(format t "  0 1 2~%")
	(format t "0~A~%" (nth 0 board))
	(format t "1~A~%" (nth 1 board))
	(format t "2~A~%" (nth 2 board))
)

(defun play (turn)
	(cond
		((equal turn 'H)
			(format t "Human where would you like to play? ROW COL ~%")
			(setf row (read))
			(setf col (read))
			(if (equal (nth col (nth row board)) '- )
				(progn
					(setf (nth col (nth row board)) turn)
					(printBoard)
					(if (checkWin turn)
						(return-from play (format t "~A WINS" turn))
						)
					(play 'C))
			)			
		)
		((equal turn 'C)
			(format t "Computer where would you like to play? ROW COL ~%")
			(setf row (read))
			(setf col (read))
			(if (equal (nth col (nth row board)) '- )
				(progn
					(setf (nth col (nth row board)) turn)
					(printBoard)
					(if (checkWin turn)
						(return-from play (format t "~A WINS" turn))
						)
					(play 'H))
			)			
		)
	)
)
	; (format t "Where would you like to play? ROW COL ~%")
	; (setf row (read))
	; (setf col (read))
	; (if (equal (nth col (nth row board)) '- )
	; 	(progn
	; 	(setf (nth col (nth row board)) player)
	; 	(printBoard))
	; )

(defun checkWin(player)
	; check vertical left
	(or (and (equal (nth 0 (nth 0 board)) player)
			 (equal (nth 0 (nth 1 board)) player)
			 (equal (nth 0 (nth 2 board)) player))
		(and (equal (nth 1 (nth 0 board)) player)
			 (equal (nth 1 (nth 1 board)) player)
			 (equal (nth 1 (nth 2 board)) player))
		(and (equal (nth 2 (nth 0 board)) player)
			 (equal (nth 2 (nth 1 board)) player)
			 (equal (nth 2 (nth 2 board)) player))
		(and (equal (nth 0 (nth 0 board)) player)
			 (equal (nth 1 (nth 0 board)) player)
			 (equal (nth 2 (nth 0 board)) player))
		(and (equal (nth 0 (nth 1 board)) player)
			 (equal (nth 1 (nth 1 board)) player)
			 (equal (nth 2 (nth 1 board)) player))
		(and (equal (nth 0 (nth 2 board)) player)
			 (equal (nth 1 (nth 2 board)) player)
			 (equal (nth 2 (nth 2 board)) player))
		(and (equal (nth 0 (nth 0 board)) player)
			 (equal (nth 1 (nth 1 board)) player)
			 (equal (nth 2 (nth 2 board)) player))
		(and (equal (nth 2 (nth 0 board)) player)
			 (equal (nth 1 (nth 1 board)) player)
			 (equal (nth 0 (nth 2 board)) player))
	)
	
)
;TESTING TO MAKE SURE THAT CONDITIONALS ARE RIGHT
(defun testing(i boardz)
	(cond 
		((equal i 1)
			(format t "Vertical Left")
			(format t "~A" (nth 0 (nth 0 boardz)))
			(format t "~A" (nth 0 (nth 1 boardz)))
			(format t "~A" (nth 0 (nth 2 boardz)))
		)
		((equal i 2)
			(format t "Vertical Middle")
			(format t "~A" (nth 1 (nth 0 boardz)))
			(format t "~A" (nth 1 (nth 1 boardz)))
			(format t "~A" (nth 1 (nth 2 boardz)))
		)
		((equal i 3)
			(format t "Vertical Right")
			(format t "~A" (nth 2 (nth 0 boardz)))
			(format t "~A" (nth 2 (nth 1 boardz)))
			(format t "~A" (nth 2 (nth 2 boardz)))
		)
		((equal i 4)
			(format t "Horizontal Top")
			(format t "~A" (nth 0 (nth 0 boardz)))
			(format t "~A" (nth 1 (nth 0 boardz)))
			(format t "~A" (nth 2 (nth 0 boardz)))
		)
		((equal i 5)
			(format t "Horizontal Middle")
			(format t "~A" (nth 0 (nth 1 boardz)))
			(format t "~A" (nth 1 (nth 1 boardz)))
			(format t "~A" (nth 2 (nth 1 boardz)))
		)
		((equal i 6)
			(format t "Horizontal Bottom")
			(format t "~A" (nth 0 (nth 2 boardz)))
			(format t "~A" (nth 1 (nth 2 boardz)))
			(format t "~A" (nth 2 (nth 2 boardz)))
		)
		((equal i 7)
			(format t "left-right")
			(format t "~A" (nth 0 (nth 0 boardz)))
			(format t "~A" (nth 1 (nth 1 boardz)))
			(format t "~A" (nth 2 (nth 2 boardz)))
		)
		((equal i 8)
			(format t "right-left")
			(format t "~A" (nth 2 (nth 0 boardz)))
			(format t "~A" (nth 1 (nth 1 boardz)))
			(format t "~A" (nth 0 (nth 2 boardz)))
		)
	)
)
(defun returnTrue()
	(if (equal 8 8)
		t)
	)
(defun gameOver()
	(loop for x in board
		do(loop for y in x
			;do (print y)
		)
	)
)